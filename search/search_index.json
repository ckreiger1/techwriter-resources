{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Resources for technical writers","text":"<p>This site compiles useful resources for technical writers. </p> <p></p>"},{"location":"aboutme/","title":"About me","text":"<p>My name is Chad Kreiger and I'm a technical writer based in Portland, Oregon. I'm experienced in healthcare analytics, science education, and mortgage banking documentation. With more than a decade of MadCap Flare experience, I've also taught graduate-level topic-based authoring with MadCap Flare course at Portland State University.  </p> <p>I've presented at the MadWorld Technical Communication conference (2023, 2022, and 2018) and via webinar for MadCap Software regarding Flare implementation and content migration. I presented \"Reduce, Re-Use, Repurpose: Topic-Based Technical Communication with MadCap Flare\" at SIGDOC 2019. I'm also the founder and organizer of the Portland Flare User Group.  </p> <p>My professional interests include technical writing, Flare project setup and maintenance, topic-based writing training and instructing, software documentation, deployment strategy, data analytics, git workflows, and scrum/agile methodologies.  </p> <p>Giving back to my community is also important to me. I'm an active volunteer with the Oregon Food Bank and Store to Door, and I also volunteer with local schools and various community organizations.  </p> <p>If you are ever in Portland, let's meet up for  </p>"},{"location":"blogs/blogs/","title":"Recommended technical writing blogs","text":"<p>Here's a selection of recommended technical writing blogs. Whether you're a seasoned professional or just starting your journey as a technical writer, these blogs offer invaluable insights, tips, and resources. Explore these sources to stay up-to-date in the latest industry trends and news:</p> <ul> <li>MadBlog </li> <li>Passo.Uno </li> <li>I'd Rather Be Writing </li> <li>I Create Docs </li> <li>TechWhirl </li> <li>Beyond the Bleeding Edge </li> <li>Write the Docs </li> <li>The Content Wrangler </li> </ul>"},{"location":"blogs/videos/","title":"Videos","text":"<p>This page is under development.</p>"},{"location":"processes/docplanning/","title":"Document planning","text":"<p>A technical writing document plan is a blueprint or outline that details the structure, content, and process for creating a technical document. It serves as a guide to make sure that the document is well-organized, clear, and meets the needs of its intended audience. The plan helps to streamline the writing process and provides a framework for managing the various aspects of technical writing. </p> <p>When starting a new technical writing project, it's helpful to gather information about your audience, knowledge channels and subject area experts, and overall expectations for content delivery and timelines. </p> <ul> <li>Product/Domain Background: Gain as much background knowledge in the domain as you can. If it's a product you are writing about, learn about it's industry, how it's used, what problem it solves, and its user base. </li> <li>Reason for Updates or Change: For example, is this a new product launch or is an existing product undergoing maintenance-based updates?</li> <li>Existing Documentation (if any): It's helpful to read the resources already available to understand the scope for writing about changes.</li> <li>Target Audience(s): These could include users, admin, internal admin, etc.</li> <li>User Needs Assessment: Learn about the personas, their painpoints, expertise, and overall needs so that your documentation best serves your audience. </li> <li>Subject Area Experts/Key stakeholders: Who can answer questions as they arise or can offer insightful product use cases and tips.</li> <li>Knowledge Resources and Channels: Where can you learn more? What meetings should you attend? </li> <li>Test Environments (if applicable): Are their environments available for you to test processes or try out new features?</li> <li>Reviewer/Approver: Who are trusted reviewers and who needs to approve documentation before the documentation is published. </li> <li>Content Delivery: What format will documentation be delivered in and what does the deployment pipeline look like?</li> <li>Deadline or Release Cycle timelines: When does content need to be live? What other document milestones need to happen along the way?</li> </ul>"},{"location":"processes/finalreview/","title":"Final review","text":"<p>Final reviews are one of the most important parts of the documentation lifecycle. Self-reviews and peer reviews help ensure your documentation provides all critical information and conforms to decided upon styles and standards. Subject area reviews are also critical to the process and these help ensure the accuracy and further drive home your credibility as a writer. It is important to set boundaries with SME reviewers to ensure they focus the majority of their time reading for accuracy, and not so much grammar and punctuation. Targeted SME reviews also help expedite the process. Try to only provide only the specific topics for review where critical updates have been made. This helps limit the review scope, which not only provides a courtesy to the reviewer, but helps with their turn times too. </p>"},{"location":"processes/lifecycle/","title":"Documentation lifecycle","text":""},{"location":"processes/publishing/","title":"Publishing","text":"<p>With your documentation all ready to go, be sure you allow yourself sufficient time for final publishing protocols. Whether this is as simple as sharing a document on a Sharepoint site, or involves a complicated deployment pipeline, your document planning should have the details needed for document delivery expectations. Some workflows, such as docs-as-code or other such technical processes, often require collaboration with dev ops engineers and having your files at the right place at just the right time is critical for a smooth release. Once your documentation is published, it is always a good idea to check them over once more in their live environment. Then, give yourself a moment to breathe a sigh of relief. If this was a one-time release, you may be on to your next assignment. In a continuous release software cycle, you might already be on to your next sprint work. Either way, always remember to celebrate each published set of files, and reflect on what you have accomplished    </p>"},{"location":"processes/startwriting/","title":"Start writing","text":"<p>After you complete your document planning and you are ready to begin your writing phase of the documentation process, there are several key steps to gather accurate and relevant information. This includes attending meetings and demos, gathering information from subject matter experts, and testing the software yourself. The goal is to understand the product thoroughly in order to create clear, user-friendly documentation.</p> <p>The typical process begins with a broad overview statement that provides context for the user role, detailing who the audience is, what task is being performed, when it should be done, and why it is necessary. After this context, the \"how-to\" instructions follow, providing step-by-step guidance for users to complete the task efficiently.</p> <p>This approach ensures that the technical documentation is both accurate and useful to the target audience.</p> <p>During your document planning, you should have also decided on the method for documentation delivery and should choose your writing tools and resoures accordingly. </p>"},{"location":"strategies/markdowntips/","title":"Markdown tips","text":"<p>This topic is designed as a template to be used for writing in markdown. </p> <p>Here I used a Heading 1 to start my page. Paragraph text requires no special syntax. Here's another paragraph. And another paragraph.</p>"},{"location":"strategies/markdowntips/#heading-2","title":"Heading 2","text":"<p>Here's some text under a sub heading.  </p>"},{"location":"strategies/markdowntips/#heading-3","title":"Heading 3","text":"<p>Here's some text under another sub heading.</p>"},{"location":"strategies/markdowntips/#section-break","title":"Section break","text":""},{"location":"strategies/markdowntips/#emphasis","title":"Emphasis","text":"<p>Note: This is how you bold.  </p> <p>Italics: This is how you use italics. </p> <p>Bold and italics together is not often used.</p>"},{"location":"strategies/markdowntips/#ordered-lists","title":"Ordered lists","text":"<p>To complete the steps required for this task: </p> <ol> <li>Click on the Start button.  </li> <li>Select the applicable option.  </li> <li>Complete the form.  </li> <li>Click Save.  </li> </ol> <p>Longer list with indents To complete the steps required for this task:   </p> <ol> <li>Item one.</li> <li>Item two.<ol> <li>Item here.</li> </ol> </li> <li>Item four.    </li> </ol>"},{"location":"strategies/markdowntips/#unordered-lists","title":"Unordered lists","text":"<ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul>"},{"location":"strategies/markdowntips/#table-example","title":"Table example","text":"Column Heading Second Column Heading Third Column Heading Fourth Column Heading Details More More More More More Even More And More"},{"location":"strategies/markdowntips/#task-list","title":"Task list","text":"<ul> <li>[x] Do this first.</li> <li>[ ] Then this.</li> <li>[ ] Then finally this.</li> </ul>"},{"location":"strategies/markdowntips/#admonition","title":"Admonition","text":"<p>Warning</p> <p>Here is a warning statement!  </p>"},{"location":"strategies/markdowntips/#hyperlinks","title":"Hyperlinks","text":"<p>CNN external hyperlink </p> <p>Blogs relative link</p>"},{"location":"strategies/strategies/","title":"Technical writing strategies","text":"<p>Good technical writing is clear, concise, and effective documentation. The primary goal is to provide clear instructions and offer information that meets the needs of its intended audience. Writing strategies, such as topic-based writing, can help authors write complete, focused content that helps their audience find the information they need. </p>"},{"location":"strategies/topic-basedwriting/","title":"Topic-based writing","text":"<p>Topic-based authoring is a modular approach to content creation where content is structured around topics that can be mixed and reused in different contexts. It is defined in contrast with book-oriented or narrative content, written in the linear structure of written books.</p> Topic-based Writing Document Based Writing Self-contained Broader document scope Answers a single question Content subject to changing course Context agnostic Context rooted to the document Modularized writing style Linear content, immovable Single-sourcing content Multi-sourcing conten Tools: MadCap Flare, DITA Tools: Microsoft Word, Google Docs"},{"location":"strategies/topic-basedwriting/#every-page-is-page-one-characteristics","title":"Every Page is Page One characteristics","text":"<ul> <li>Self-contained</li> <li>Specific and Limited Purpose</li> <li>Conform to a Type</li> <li>Establish their Context</li> <li>Assume the Reader is Qualified</li> <li>Stay on One Level</li> <li>Link Richly</li> </ul> <p>Source cited: Every Page is Page One, Topic-based Writing for Technical Communication and the Web, by Mark Baker </p>"},{"location":"strategies/topic-basedwriting/#advantages-to-topic-based-writing","title":"Advantages to topic-based writing","text":"<ul> <li>Consistency</li> <li>Efficiency (time-saving techniques)</li> <li>Publishing in an agile environment (smaller editorial samples)</li> <li>Broaden your publishing capabilities (and greater reach to your audience)</li> <li>Localization and translation considerations</li> <li>Promotes content structure and purpose</li> </ul>"},{"location":"styles/styleguides/","title":"Style guides","text":"<p>A style guide in technical writing is a set of standardized guidelines that promotes consistency and clarity across all technical documents. It helps writers adhere to a uniform tone, structure, and formatting, making the document easier to understand and more professional. The style guide may cover everything from grammar and punctuation to document organization and visual elements.</p> <p></p>"},{"location":"styles/valestylechcker/","title":"Vale style checker","text":"<p>Vale is an open-source tool that helps technical writers enforce consistent writing styles across their documentation. It works as a flexible style checker that automatically checks to maintain writing quality, consistency, and adherence to a defined style guide. You can add style guides, such as the Microsoft Style Guide, or in-house rules for it to check against. In an IDE, like VS Code, you can program Vale to catch writing instances that don't adhere to your style(s) and offer suggestions for better writing in its place. </p>"},{"location":"tools/graphicstools/","title":"Graphics tools","text":"<p>Here\u2019s a list of common graphic tools that are especially useful for technical writers to create visuals like screenshots, illustrations, and other graphical elements in their documentation. Using graphical elements can help technical writers enhance their documentation with visuals that clarify information and processes. </p> <ul> <li>draw.io (diagrams.net) - A free, web-based tool for creating flowcharts, wireframes, and diagrams, commonly used by technical writers to visualize processes or system architecture.</li> <li>Microsoft Visio - A comprehensive diagramming tool used to create flowcharts, process diagrams, network diagrams, and more. It\u2019s commonly used in corporate environments.</li> <li>Snagit - A powerful screenshot tool with editing capabilities that lets writers capture screenshots, annotate them, and add text or arrows to highlight important elements.</li> <li>Inkscape - A free and open-source vector graphics editor, ideal for creating scalable diagrams, illustrations, and custom graphics for documentation.</li> <li>Adobe Illustrator - A professional vector graphics editor used for creating detailed illustrations and diagrams. Although not free, it's widely used in industries that require high-quality, custom graphics.</li> <li>GIMP - A free, open-source raster graphics editor used for image manipulation, such as resizing, cropping, and adding effects to images for documentation.</li> </ul>"},{"location":"tools/madcapflarebasics/","title":"MadCap Flare basics","text":"<p>MadCap Flare is a powerful, professional help authoring tool (HAT) used by technical writers to create, manage, and publish a variety of technical documentation, such as user manuals, online help systems, and knowledge bases. It offers advanced features like content reuse, single-source publishing, and multi-format output (HTML5, PDF, and more), making it ideal for creating consistent and high-quality documentation for both online and print formats. MadCap Flare uses an XML-based architecture and integrates with many common (Git, TFS, etc) version control tools for efficient collaboration and streamlined workflows within technical writing teams.</p> <p>Here's a basic workflow of how Flare works:</p> <p></p>"},{"location":"tools/mkdocstips/","title":"MkDocs tips","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"tools/mkdocstips/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy</code> - Publish your docs to GitHub Pages.</li> </ul>"},{"location":"tools/mkdocstips/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"tools/opensourcetools/","title":"Open-source tools","text":"<p>Here\u2019s a list of free tools (some open-source, some free-to-use) that are ideal for technical writers. These tools provide a broad range of features for technical writing\u2014whether it\u2019s creating documentation, managing tasks, collaborating with a team, or even adding diagrams and interactivity to your docs\u2014all at no cost!</p>"},{"location":"tools/opensourcetools/#documentation-generators","title":"Documentation generators","text":"<ul> <li>MkDocs - A free and open-source static site generator for building documentation with markdown.</li> <li>Sphinx - Free, open-source documentation generator for Python, primarily using reStructuredText but also supporting markdown.</li> <li>Docusaurus - A free-to-use, open-source tool developed by Facebook for creating easy-to-manage documentation websites.</li> <li>Hugo - A fast, free, and open-source static site generator for creating and managing technical documentation sites.</li> <li>GitBook (Free Version) - Offers a free plan that lets you create simple documentation sites with Git integration.</li> </ul>"},{"location":"tools/opensourcetools/#version-control","title":"Version control","text":"<ul> <li>Git - Free and open-source version control system essential for tracking and collaborating on documentation.</li> <li>GitHub - Free hosting for public repositories, with markdown rendering and integrated tools for collaboration.</li> <li>GitLab - A free Git-based platform for version control and collaborative documentation writing, with free public and private repositories.</li> </ul>"},{"location":"tools/opensourcetools/#other-tools","title":"Other tools","text":"<ul> <li>draw.io (diagrams.net) - Free web-based tool for creating flowcharts, network diagrams, and other technical graphics.</li> <li>Visual Studio Code - A free and powerful code editor with extensions for markdown editing, live previews, Git integration, and more.</li> <li>Notepad++ - A free text editor with support for various languages and markdown syntax highlighting, useful for basic documentation editing.</li> <li>Swagger UI - Free and open-source tool for building interactive API documentation.</li> </ul>"},{"location":"tools/technicalwritingtools/","title":"Technical writing tools","text":"<p>Technical writing tools are software applications or platforms that assist technical writers in creating, managing, and publishing various forms of technical documentation, such as user manuals, help guides, API documentation, and other content aimed at explaining complex concepts or instructions clearly and concisely. These tools help streamline the writing process, improve collaboration, promote consistency, and enhance the quality of the final output.</p> <p></p>"},{"location":"tools/versioncontroltools/","title":"Version control tools","text":"<p>Version control helps technical writers track, manage, and collaborate on document revisions over time. It helps you maintain a history of changes made to documentation, enabling you to revert to previous versions, collaborate with team members without conflict, and ensures consistency and accuracy throughout the writing process. Using version control helps technical writers efficiently manage updates, handle multiple document versions, and streamlines the process of reviewing and publishing content. This is particularly useful when working on large, collaborative projects and can help you manage numerous revisions and changes.</p> <p>Some common version control tools for technical writers include</p> <ul> <li>Git</li> <li>Team Foundation Server (TFS)</li> <li>Perforce</li> </ul> <p>And many more! </p>"}]}